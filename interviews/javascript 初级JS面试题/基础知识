一、变量类型和计算
	—— 题目
		1、JS中使用typeof能得到哪些类型
		2、何时使用 === 何时使用 ==
		3、值类型和引用类型的区别
		4、手写深拷贝
	—— 知识点
		1、变量类型	
			—— 值类型 VS 引用类型
				1、常见值类型
					let a
					const s = 'abc'
					const n = 100
					const b = ture
					const s = Symbol('s')
				2、常见引用类型
					const obj = {x: 100}
					const arr = ['a', 'b', 'c']
					const n = null //特殊引用类型，指针指向为空地址
					// 特殊引用类型，但不用于存储数据，所以没有“拷贝、复制函数”这一说
					function fn() {}

			—— typeof运算符
				1、识别所有值类型
				2、识别函数
				3、判断是否事引用类型（不可再细分），（识别null、数组、对象均为object）
			—— 深拷贝
				function deepClone(obj = {}) {
					if (typeof !== 'object' || obj == null) {
						return obj
					}
					// 初始化返回结果
					let result
					if (obj instanceof Array) {
						result = []
					} else {
						result = {}
					}

					for(let key in obj) {
						if (obj.hasOwnProterty(key)){ // 保证key不是原型的属性
							// 递归
							result[key] = deepClone(obj[key])
						}
					}
					return result
				}
		2、变量计算 - 类型转换
			—— 字符串拼接
				const a = 100 + 10	// 110
				const b = 100 + '10'	// '10010'
				const c = ture + '10'	// 'true10'

			—— ==
				100 == '100' /true
				0 == '' //true
				0 == false // true
				false == ''	// ture
				null == undefinew // ture

				// 除了 == null之外，其他都一律用===，例如
					const obj = {x: 100}
					if (obj.a == null) {} // 相当于：if(obj.a === null || obj.a === undefined) {}

			—— if语句和逻辑运算
				1、truly变量：!!a === ture 的变量
				2、falsely变量：!!a === false 的变量
				3、示例
					// 以下是falsely变量。除此之外都是truly变量
					!!0 === false
					!!NaN === false
					!!null === false
					!!undefined === false
					!!false === false
				4、if语句和逻辑运算
					—— if语句
					—— 逻辑判断（&&、||、！）
	—— 题目解答
		1、JS中使用typeof能得到哪些类型
			—— 识别所有值类型
			—— 识别函数
			—— 判断是不是引用类型（不可再细分）
		2、何时使用 === 何时使用 ==
			—— 除了 == null之外，其他都一律用===
		3、值类型和引用类型的区别
			—— 值类型赋值的是值
			—— 引用类型赋值的是存储地址
		4、手写深拷贝
			—— 注意判断值类型和引用类型
			—— 注意判断是数组还是对象
			—— 递归
二、原型和原型链
	—— 题目
		1、如何判断一个变量是不是数组？
		2、手写一个简易的jQuery，考虑插件和扩展性
		3、class的原型本质，怎么理解？
	—— 知识点
		1、class
			—— constructor
			—— 属性
			—— 方法
			—— 代码演示
				// 类
				class Student {
					constructor (name, number) {
						this.name = name
						this.number = number
					}
					sayHi() {
						console.log(`姓名${this.name},学号${this.number}`)
					}
				}

				// 通过类声明对象/实例
				const xialuo = new Student('夏落', 100)
				console.log(xialuo.name)
				xiaoluo.sayHi()

				const dongmei = new Student('马冬梅', 200)
				console.log(dongmei.name)
				dongmei.sayHi()

		2、继承
			—— extends
			—— super
			—— 扩展或重写方法
			—— 代码演示

				// 父类
				class Person {
					constructor(name){
						this.name = name
					}
					eat() {
						console.log(`${this.name} eat somethign`)
					}
				}

				// 子类
				class Student extends Person {
					cosntructor(name, number) {
						super(name)
						this.number = number
					}
					sayHi() {
						console.log(`name: ${this.name}, number: ${this.number}`)
					}
				}

				// 子类
				class Teacher extends Person {
					cosntructor(name, major) {
						super(name)
						this.major = major
					}
					teach() {
						console.log(`name: ${this.name}, number: ${this.major}`)
					}
				}

				// 实例
				const xialuo = new Student('夏落', 100)
				console.log(xialuo.name)
				xiaoluo.sayHi()
				xiaoluo.eat()

				// 实例
				const dongmei = new Student('马冬梅', '语文')
				console.log(dongmei.name)
				dongmei.teach()

		2、类型判断instanceof
			xialuo instanceof Student // true
			xialuo instanceof Person // true
			xialuo instanceof Object // true

			[] instanceof Array // true
			[] instanceof Object // true

			{} instanceof Object // true

		3、原型和原型链
			// class 实际上是函数，可见是语法糖
			typeof Person // function
			typeof Student // function

			// 隐式原型和显示原型
			console.log(xialuo.__proto__)
			console.log(Student.prototype)
			console.log(xialuo.__proto__ === Student.prototype)
		4、原型关系
			—— 每个class都有显示原型prototype
			—— 每个实例都有隐式原型__proto__
			—— 实例的__proto__指向对应class的prototype
		5、基于原型的执行规则
			—— 获取属性xialuo.name或执行方法xiaoluo.sayhi()时
			—— 先在自身属性和方法寻找
			—— 如果找不到则自动去__proto__中找
		6、原型链
			console.log(Student.prototype.__proto__)
			console.log(People.prototype)
			console.log(People.prototype === Student.prototype.__proto__)
		7、判断是否是自身属性
			—— hasOwnProperty
		8、instanceof工作原理
			—— instanceof通过当前实例的隐式原型一层层的查找对应的显示原型如果找不到就返回false
		9、重要提示
			—— class是ES6语法规范，由ECMA委员会发布
			—— ECMA只规定语法规则，即我们代码的书写规范，不规定如何实现
			—— 以上实现方式都是V8引擎的实现方式，也是主流的
		10、补充
			xialuo.sayHi() //姓名 夏洛 年龄 19
			xialuo.name // 夏洛
			xialuo.age // 19
			xialuo.__proto__.sayHi() // 姓名 undefined 年龄 undefined
			xialuo.__proto__.name // undefined
			xialuo.__proto__.age // undefined
	—— 题目解答
		1、如何判断一个变量是不是数组？
			—— instanceof
		2、手写一个简易的jQuery，考虑插件和扩展性
			class Jquery {
				constructor(selector) {
					const result = document.querySelectorAll(selector)
					const length = result.length
					for(let i = 0; i < length; i++) {
						this[i] = result[i]
					}
					this.length = length
				}
				get(index) {
					return this[index]
				}
				each(fn) {
					for(let i = 0;i < this.length; i++) {
						const elem = this[i]
						fn(elem)
					}
				}
				on(type, fn) {
					return this.each(elem => {
						elem.addEventListener(type, fn, fasle)
					})
				}
			}

			// 考虑插件和扩展性
			// 插件
			jQuery.prototype.dialog = function(info) {
				alert(info)
			}
			// 造轮子
			class myJQuery extends jQuery {
				constructor(selector) {
					super(selector)
				}
				// 扩展自己的方法
				addClass(className) {

				}
				style(data) {

				}
			}
		3、class的原型本质，怎么理解？
			—— 原型和原型链的图示
			—— 属性和方法的执行规则
三、作用域和闭包
	—— 题目
		1、this的不同应用场景，如何取值
		2、手写bind函数
		3、实际开发中闭包的应用场景，举例说明
			// 创建10个`<a>`标签，点击的时候弹出来对应的序号
			let i, a
			for(i = 0; i <10; i++){
				a = document.createElement('a')
				a.inerHTML = i + '<br>'
				a.addEventListener('click', function(e) {
					e.preventDefault()
					alert(i)
				})
				document.body.appendChild(a)
			}
	—— 知识点
		1、作用域和自由变量
			—— 作用域：代表某个变量的合法使用范围
			—— 作用域分类
				1、全局作用域
				2、函数作用域
				3、块级作用域（ES6新增）
					—— 什么是块
						1、if语句、for语句、while语句后面的大括号包住的范围
			—— 自由变量
				1、一个变量在当前作用域没有定义，但被使用了
				2、向上级作用域，一层一层依次寻找，直至找到为止
				3、如果到全局作用域都没找到，则报错xx is not defined
					let a=0
					function fn1(){
						let a1 = 100

						function fn2 () {
							let a2 = 200

							function fn3() {
								let a3 = 300
								return a + a1 + a2 + a3
							}
							fn3()
						}
						fn2()
					}
					fn1()
		2、闭包
			—— 作用域应用的特殊情况，有两种表现：
				1、函数作为参数被传递
					function print(fn) {
						let a = 200
						fn()
					}
					let a = 100
					function fn() {
						console.log(a)
					}
					print(fn) // 100

				2、函数作为返回值被返回
					function create () {
						let a = 100
						return function() {
							console.log(a)
						}
					}
					let fn = create()
					let a = 200
					fn() // 100
			—— 所有自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方！！！！！
		3、this
			—— this的使用场景
				1、 作为普通函数
				2、 使用call、apply、bind
				3、 作为对象方法被调用
				4、 在class方法中调用
				5、 箭头函数
			—— this取出来的值是在执行的时候决定的，不是在定义的时候决定的！！！！！
				function fn1() {
					console.log(this)
				}
				fn1() // window

				fn1.call({x: 100}) // {x: 100} call函数直接自动被执行

				const fn2 = fn1.bind({x: 200})	bind返回一个函数，需要手动执行
				fn2() // {x: 200}


				const zhangsan = {
					name: '张三',
					sayHi() {
						// this即当前对象
						console.log(this)
					}
					wait() {
						setTimeout(function() {
							// this === window
							console.log(this)
						})
					}
				}

				const zhangsan = {
					name: '张三',
					sayHi() {
						// this 即当前对象
						console.log(this)
					},
					waitAgain() {
						setTimeout(()=>{
							// this即当前对象
							console.log(this)
						})
					}
				}

				class People {
					constructor(name) {
						this.name = name
						this.age = 20
					}
					sayHi() {
						console.log(this)
					}
				}
				const zhangsan = new People('张三')
				zhangsan.sayHi() // zhangsan对象
	—— 题目解答
		1、this的不同应用场景，如何取值
			—— 作为普通函数：返回window
			—— 使用call、apply、bind： 传入什么绑定什么
			—— 作为对象方法被调用：返回对象本身
			—— 在class方法中调用：当前实例的本身
			—— 箭头函数：找他上级作用域的this来确定
		2、手写bind函数
			Function.prototype.bin1 = function () {
				// 将参数解析为数组
				const args = Array.prototype.slice.call(arguments)
				// 获取this（取出数组第一项，数组剩余的就是传递的参数）
				const t = args.shif()
				const self = this // 当前函数
				// 返回一个函数
				return function () {
					// 执行原函数，并返回结果
					return self.apply(t, args)
				}
			}
		3、实际开发中闭包的应用场景，举例说明
			—— 隐藏数据
				function createCache() {
					const data = {} // 闭包中的数据，被隐藏，不被外界访问
					return {
						set: function(key, val) {
							data[key] = val
						},
						get: function(key) {
							return data[key]
						}
					}
				}

				const c = createCache()
				c.set('a', 100)
				console.log(c.get('a'))
			—— 做一个简单的cache工具
				// 创建10个`<a>`标签，点击的时候弹出来对应的序号
				let i, a
				for(i = 0; i <10; i++){
					a = document.createElement('a')
					a.innerHTML = i + '<br>'
					a.addEventListener('click', function(e) {
						e.preventDefault()
						alert(i)	// 全部返回10
					})
					document.body.appendChild(a)
				}
				// 改良
				let a
				for(let i = 0; i <10; i++){
					a = document.createElement('a')
					a.innerHTML = i + '<br>'
					a.addEventListener('click', function(e) {
						e.preventDefault()
						alert(i)	// 返回对应的序号
					})
					document.body.appendChild(a)
				}
四、异步和单线程
	—— 题目
		1、同步和异步的区别是什么？
		2、手写用Promise加载一张图片
		3、前端使用异步的场景有哪些
		4、setTimeout 笔试题
			console.log(1)
			setTimeout(function(){
				console.log(2)
			}, 1000)
			console.log(3)
			setTimeout(function () {
				console.log(4)
			},0)
			console.log(5)
			// 输出结果：1、3、5、4、2
	—— 知识点
		1、单线程和异步
			—— JS是单线程语言，只能同时做一件事
			—— 浏览器和nodeJS已支持JS启动进程，如Web Worker
			—— JS和DOM渲染公用同一个线程，因为JS可修改DOM结构
			—— 遇到等待（网络请求，定时任务）不能卡住
			—— 所以需要异步
			—— 异步是基于callback函数形式调用的
			—— 举例
				// 异步 (callback回调函数)
				console.log(1)
				setTimeout(()=>{
					console.log(2)
				}, 100)
				console.log(3)

				// 同步
				console.log(1)
				alert(2)
				console.log(3)
			—— 基于JS是单线程语言，异步不会阻塞代码执行，同步会阻塞代码执行
		2、应用场景
			—— 网络请求，如 ajax、图片加载
			—— 定时任务，如 setTimeout
			—— 举例
				// ajax
					console.log('start')
					$.get('./data.json', function(data) {
						console.log(data)
					})
					console.log('end')

				//  图片加载
					console.log('start')
					let img = document.createElement('img')
					img.onload = function() {
						console.log('loaded')
					}
					img.src = '/XXX.png'
					consoe.log('end')

				// setTimeout
					console.log(1)
					setTimeout(()=>{
						console.log(2)
					}, 100)
					console.log(3)

				// setInterval
					console.log(1)
					setInterval(()=>{
						console.log(2)
					}, 100)
					console.log(3)
		3、callback hell 和 Promise
			// callback hell	多层嵌套
				$.get(url, (data)=>{
					console.log(data1) // 第1份数据

					$.get(url, (data2)=>{
						console.log(data2) // 第2份数据

						$.get(url, (data3)=>{
							console.log(data3) // 第3份数据

						})
					})
				})

			// Promise
				function getData(url) {
					return new Promise((resolve, reject)=>{
						$.ajax({
							url,
							success(data) {
								resolve(data)
							},
							error(err) {
								reject(err)
							}
						})
					})
				}
			// 使用 单层管道 解决了回调地狱
				const url1 = '/data1.json'
				const url2 = '/data2.json'
				const url3 = '/data3.json'
				getData(url1).then(data1=>{
					console.log(data1)
					return getData(url2)

				}).then(data2=>{
					console.log(data2)
					return getData(url3)

				}).then(data3=>{
					console.log(data3)

				}).catch(err=>console.error(err))

	—— 回答问题
		1、同步和异步的区别是什么？
			—— 基于JS是单线程语言
			—— 异步不会阻塞代码执行
			—— 同步会阻塞代码执行
		2、手写用Promise加载一张图片
			function loadImg(src) {
				const p = new Promise (
					(resolve, reject) => {
						const img = document.createElement('img')
						img.onload = ()=>{
							resolve(img)
						}
						img.onerror = () => {
							const err = new Error(`图片加载失败 ${src}`)
							reject(err)
						}
						img.src = src
					}
				)
				return p
			}

			loadImg(url1).then(img => {
				console.log(img1.width)
				return img1 // 普通对象

			}).then(img1 => {
				console.log(img1.height)
				return loadImg(url2) // promise 实例

			}).then(img2 => {
				console.log(img2.height)
				return img2

			}).catch(ex=>{
				console.error(ex)
			})

		3、前端使用异步的场景有哪些
			—— 网络请求，如 ajax、图片加载
			—— 定时任务，如 setTimeout
	—— 小结
		1、单线程和异步，异步和同步区别
		2、前端异步的应用场景：网络请求 & 定时任务
		3、Promise解决callback hell

—— JS基础知识
	1、回顾内容
		—— 变量和计算
		—— 原型和原型链
		—— 作用域和闭包
		—— 异步和单线程
	2、回顾题目
	3、回顾知识点











