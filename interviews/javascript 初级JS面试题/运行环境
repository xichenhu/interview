—— 运行环境即浏览器（server端有nodeJS），下载网页代码，渲染出页面，期间会执行若干JS，要保证代码在浏览器中，稳定且高效。
—— 网页加载过程
	—— 题目
		1、从输入url到渲染出页面的整个过程
		2、window.onload 和 DOMCtentLoaded的区别
			window.addEventListener('load', function(){
				// 页面的全部资源加载完才会执行，包括图片、视频等
			})
			window.addEventListener('DOMContentLoaded', function(){
				// DOM渲染完成即可执行，此时图片、视频还可能没有加载完成
			})
	—— 知识点
		1、加载资源的形式
			—— html代码
			—— 媒体文件，如图片、视频等
			—— JavaScript css

		2、加载资源的过程
			—— DNS解析：域名 -> IP地址
			—— 浏览器根据IP地址向服务器发起http请求
			—— 服务器处理http请求，并返回给浏览器

		3、渲染页面的过程
			—— 根据HTML代码生成DOM Tree
			—— 根据CSS代码生成CSSOM （css object module）
			—— 将DOM Tree 和 CSSOM整合形成Render Tree
			—— 根据Render Tree 渲染页面
			—— 遇到<script>则暂停渲染，优秀加载并执行JS代码，完成再继续
			—— 直至把Render Tree渲染完成
	—— 思考
		1、为何建议CSS放在head中？
		2、为何建议把JS放在body之后？
	—— 回答问题
		1、从输入url到渲染出页面的整个过程
			下载资源：各个资源类型、下载过程
			渲染页面： 结合html css JavaScript 图片等

—— 性能优化
	—— 没有标准答案，但要求尽量全面
	—— 某些细节问题会单独提问：手写防抖、节流
	—— 只关注核心点，针对面试
	—— 性能优化原则
		1、多使用内存、缓存或其他方法
		2、减少CPU计算量，减少网络加载耗时
		3、（适用于所有编程的性能优化————空间换时间）
	—— 从何入手
		1、让加载更快
			—— 减少资源体积 —— 压缩代码
			—— 减少访问次数：合并代码、SSR服务器端渲染，缓存
				1、 webpack 文件缓存
					—— 静态资源加hash后缀，根据文件内容计算hash
					—— 文件内容不变，则hash不变，则url不变
					—— url和文件不变，则会自动触发http缓存机制，返回304
				2、SSR
					—— 服务器端渲染：将网页和数据一起加载，一起渲染
					—— 非SSR（前后端分离）：先加载网页，再加载，再渲染数据
					—— 早先的JSP ASP PHP，现在的vue React SSR

			—— 使用更快的网络：CDN
		2、让渲染更快
			—— CSS放在head，JS放在body最下面
			—— 尽早开始执行JS，用DOMContentLoaded触发
			—— 懒加载（图片懒加载，上滑加载更多）
				<img id="id1" src="preview.png" data-src="abc.png">
				<script type="text/javascript">
					var img1 = document.getElementById('img1')
					img1.src = img1.getAttribute('data-realsrc')
				</script>
			—— 对DOM查询进行缓存
			—— 频繁DOM操作，合并到一起插入DOM结构
			—— 节流throttle 防抖debounce
				1、防抖
					—— 监听一个输入框的，文字变化后触发change事件
					—— 直接用keyup事件，则会频繁触发change事件
					—— 防抖： 用户输入结束或暂停时，才会触发change事件
					—— 演示
						const input1 = document.getElementById('input1')
						const timer = null
						input1.addEventListener('keyup', function(){
							if(timer) {
								clearTimeout(timer)
							}
							timer = setTimeout(()=>{ 	// 模拟触发方法
								console.log(input1.value)
								timer = null	// 清空定时器
							}, 500)
						})

						// 封装
						function debounce(fn, delay=500) {
							let timer = null 	// 不对外暴露，不会被外修改
							return function() {
								if(timer) {
									clearTimeout(timer)
								}
								timer = setTimeout(()=>{
									fn.apply(this, arguments)
									timer = null
								}, delay)
							}
						}
						input1.addEventListener('keyup', debounce(function(){
							console.log(input1.value)
						}, 600))
				1、节流
					—— 拖拽一个元素时，要随时拿到该元素被拖拽的位置
					—— 直接用drag事件，则会频繁触发，很容易导致卡顿
					—— 节流： 无论拖拽速度多快，都会每隔100ms触发一次
					—— 示例
						const div1 = document.getElementById('div1')
						let timer = null
						div1.addEventListener('drag', function(e){
							if (timer) {
								return
							}
							timer = setTimeout(()=>{
								console.log(e.offsetX, e.offsetY)
								timer = null
							}, 500)
						})

						// 节流
						function throttle(fn, delay=100) {
							let timer = null
							return function() {
								if(timer) {
									return null
								}
								timer = setTimeout(() => {
									fn.apply(this, arguments)
									timer = null
								}, delay)
							}
						}
						div1.addEventListener('drag', throttle(function(e) {
							console.log(e.offsetX, e.offsetY)
						}, 200))
—— 安全
	1、常见的web前端攻击方式有哪些？
		—— XSS 跨站请求攻击
		—— XSRF 跨站请求伪造




















