https://segmentfault.com/a/1190000018605776?utm_source=tag-newest

—— 可达性
	—— “可达性” 值就是那些以某种方式可访问或可用的值，它们被保证存储在内存中。
	—— 有一组基本的固有可达值，由于显而易见的原因无法删除。例如:
		1、本地函数的局部变量和参数
		2、当前嵌套调用链上的其他函数的变量和参数
		3、全局变量
		4、还有一些其他的，内部的
		这些值称为根。
	—— 如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。
		例如，如果局部变量中有对象，并且该对象具有引用另一个对象的属性，则该对象被视为可达性， 它引用的那些也是可以访问的。
			1、一个引用
			2、两个引用
			3、相互关联的对象

	—— JavaScript 引擎中有一个后台进程称为垃圾回收器，它监视所有对象，并删除那些不可访问的对象。

—— 无法访问的数据块

—— 内部算法
	1、基本的垃圾回收算法称为“标记-清除”，定期执行以下“垃圾回收”步骤:
		—— 垃圾回收器获取根并“标记”(记住)它们。
		—— 然后它访问并“标记”所有来自它们的引用。
		—— 然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。
		—— 以此类推，直到有未访问的引用(可以从根访问)为止。
		—— 除标记的对象外，所有对象都被删除。
—— 垃圾收集的工作原理
	1、第一步标记根
	2、然后标记他们的引用
	3、以及子孙代的引用:
	4、现在进程中不能访问的对象被认为是不可访问的，将被删除

—— JavaScript引擎应用了许多优化，使其运行得更快，并且不影响执行。
	1、一些优化:
		—— 分代回收——对象分为两组:“新对象”和“旧对象”。许多对象出现，完成它们的工作并迅速结 ，它们很快就会被清理干净。那些活得足够久的对象，会变“老”，并且很少接受检查。
		—— 增量回收——如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分。然后，各个部分分别执行。这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。
		—— 空闲时间收集——垃圾回收器只在 CPU 空闲时运行，以减少对执行的可能影响。
—— 问答题
	1、问什么是垃圾
		—— 一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。
	2、如何检垃圾
		—— 一种算法是标记 标记-清除 算法








































