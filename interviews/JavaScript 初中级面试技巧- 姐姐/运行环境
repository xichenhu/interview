零、运行环境
	—— 浏览器就可以通过访问链接来得到页面的内容
	—— 通过绘制和渲染，显示出页面的最终的样子
	—— 整个过程中，我们需要考虑什么问题？

一、页面加载
	—— 题目
		1、从输入URL到得到HTML的详细过程

		2、window.onload和DOMContentLoaded的区别 
			// window.onload 和 window.addEventListener('load', fn(){})写法一样的。
			window.addEventListener('load',function(){
				// 页面的全部资源加载完才会执行，包括图片、视频等
			})
			window.addEventListener('DOMContentLoaded',function(){
				// DOM 渲染完即可执行，此时图片、视频还可能没有加载完
			})

	—— 知识点
		1、加载资源的形式
			—— 输入url（或跳转页面）加载HTML
			—— 加载HTML中的静态资源（例如：JS、image、等）
		2、加载一个资源的过程
			—— 浏览器根据DNS，服务器得到域名的IP地址
			—— 向这个IP的机器发送HTTP请求
			—— 服务器收到、处理并返回HTTP请求
			—— 浏览器得到返回内容

		3、浏览器渲染页面的过程
			—— 根据 HTML 结构生成 DOM Tree
			—— 根据 CSS 生成 CSSOM
			—— 根据 DOM 和 CSSOM 整合成 RenderTree
			—— 根据RenderTree 开始渲染和展示
			—— 遇到<script>时，会执行并阻塞渲染

二、性能优化
	—— 性能优化是一个综合性的问题，没有标准答案，如果非常全面，能写一本书，只关注核心点，针对面试
	—— 原则
		1、多使用内存、缓存或其他方法，减少CPU计算、减少网络请求、
	—— 从哪里入手
		1、加载页面和静态资源
		2、页面渲染
	—— 加载资源优化
		1、静态资源压缩合并
		2、静态资源缓存【浏览器策略】
		3、使用CDN让加载资源更快
		4、使用SSR后端渲染，数据直接输出到HTML中
	—— 渲染优化
		1、CSS放在前面，JS放在后面
		2、懒加载（图片懒加载、下拉加载更多）
		3、减少DOM查询，对DOM查询做缓存
		4、减少DOM操作，多个操作尽量合并在一起执行
		5、事件节流
		6、尽早执行操作（如：DOMContentLoaded）
	—— 示例讲解
		1、资源合并【使用构建工具】
			优化前：	
				<script src="./a.js"></script>
				<script src="./b.js"></script>
				<script src="./c.js"></script>
			优化后：
				<script src="./abc.js"></script>
		2、缓存
			—— 通过链接名称控制缓存
			—— <script src="./abc_1.js"></script>
			—— 只有内容改变的时候，链接名称才会改变
			—— <script src="./abc_2.js"></script>
		3、CDN
			—— 自行搜索CDN网站：https://cdn.bootcss.com	
		4、使用SSR后端渲染
			—— 现在Vue React提出了这样的概念
			—— 其实jsp php asp 都属于后端渲染
		5、懒加载
			<img id="img1" src="preview.png" data-realsrc="abc.png">
			<script>
				var img1 = document.getElementById('img1')
				img1.src = img1.getAttribute('data-realsrc')
			</script>
		6、缓存DOM查询
			// 未缓存 DOM查询
				var i;
				for (i = 0; i < document.getElementByTagName('p').length; i++) {
					// todo
				}
			// 缓存了 DOM 查询
				var pList = document.getElementsByTagName('p')
				var i 
				for(i=0; i < pList.length; i++) {
					//todo
				}
		7、合并DOM插入
			var listNode = document.getElementById('list')

			// 要插入 10个 li 标签
				var frag = document.createDocumentFragment();
				var x, li;
				for (x=0; x<10; x++) {
					li = document.createElement("li");
					li.innerHTML = "List itm" + x;
					frag.appendChild(li);
				};
				listNode.appendChild(frag);
		8、事件节流
			var textarea = document.getElementById('text')
			var timeoutId
			textarea.addEventListener('keyup', function() {
				if (timeoutId) {
					clearTimeout(timeoutId)
				}
				timeoutId = setTimmeout(function(){
					// 触发change事件
				},100)
			})
三、安全性
	—— 知识点
		1、XSS 跨站请求攻击
			—— 例如： 再新浪博客写一篇文章，同事偷偷插入一段<script>；攻击代码中，获取cookie，发送自己的服务器。发布博客，有人查看博客内容，会把查看者的cookie发送到攻击者的服务器。盗用了用户账号信息。
			—— 预防：
				1、前端替换关键字，例如替换< 为 &lt； > 为 &gt；
				2、后端替换【替换速度更快，效率更高】

		2、XSRF 跨站请求伪造
			—— 你已登录一个购物网站，正在浏览商品；该网站付费接口是XXX.com/pay?id=100但是没有任何验证；然后你收到一封邮件，隐藏了<img src='XXX.com/pay?id=100'>;你查看邮件的时候，就已经悄悄的付费购买了
			—— 预防：
				1、增加验证流程，例如输入指纹、密码、短信验证码【前端配合后端】































































































































































