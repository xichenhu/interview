一、什么是闭包
	在内部作用域返回一个包含内部作用于引用的对象给外部作用域，这样能保证，内部作用域的引用不会被垃圾回收器回收的一种机制，这样可以很好的保护私有的成员变量和方法。

二、AMD和CMD的区别
	—— 同样都是异步加载模块，AMD在加载模块完成后就会执行该模块，所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行。

	// AMD 默认推荐的是 
	define(['./a', './b'], function(a, b) { 
	    // 依赖必须一开始就写好 
	    a.doSomething() // 此处略去 100 行 
	    b.doSomething() ... 
	})
	
	—— CMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的。

	// CMD 
	define(function(require, exports, module) {
	       var a = require('./a')
	       a.doSomething() // 此处略去 100 行
	       var b = require('./b') // 依赖可以就近书写
	       b.doSomething() // ... 
	})