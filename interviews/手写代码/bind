Function.prototype.bin1 = function () {
	// 将参数解析为数组
	const args = Array.prototype.slice.call(arguments)

	// 获取this（取出数组第一项，数组剩余的就是传递的参数）
	const t = args.shif()

	const self = this // 当前函数

	// 返回一个函数
	return function () {

		// 执行原函数，并返回结果
		return self.apply(t, args)
	}
}


// 通过call实现bind
Function.prototype.newBind = function (...arr) {
    let that = this
    return function () {
        that.call(...arr)
    }
}

obj = {
    a: 1
}

function say(a, b, c) {
    console.log(this)
    console.log(a, b, c)
}
say.newBind(obj, 1, 2, 3)()
//{ a: 1 }
//1 2 3





Function.prototype.bind2 = function (context) {

  //对context进行深拷贝，防止bind执行后返回函数未执行期间，context被修改
  const ctx = JSON.parse(JSON.stringify(context)) || window

  ctx.func = this

  const args = Array.from(arguments).slice(1)

  return function () {

    //注意bind方法需要合并两次函数执行的参数

    const Allargs = args.concat(Array.from(arguments))

    return Allargs.length > 0 ? ctx.func(...Allargs) : ctx.func()
  }
}

//测试
obj = { 
	c: 2
}
function a(x,y,z) { 
	console.log(this, x, y, z)
}
a.bind(obj, 1, 2)(3)		//{c:2} 1 2 3
a.bind2(obj ,1, 2)(3)		//{c:2,func:[function a]} 1 2 3




Function.prototype.myBind = function(context) {
  context = context || window
  context.func = this
  return function(...args) {
    return context.func.apply(context, args)
  }
}












