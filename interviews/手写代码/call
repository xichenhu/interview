//通过对象调用方法来修改this指向
Function.prototype.call2 = function (context){
  const ctx = context || window

  ctx.func = this //调用call2时，this是调用call2的方法（call2是在函数对象上）

  //测试用例中这个this打印出来是：[function a]

  const args = Array.from(arguments).slice(1) //保存参数  Array.from 把伪数组变成真正的数组

  //通过在ctx中新建一个 函数对象等于调用时的对象 来调用执行来修改this指向 
  const res = arguments.length > 1 ? ctx.func(...args) : ctx.func()

  delete ctx.func 	//避免造成全局污染

  return res
}

//测试用例：
obj={c:2}
function a(x,y){
	console.log(this,x,y)
}
a.call(obj, 1, 2)		//{c:2} 1 2
a.call2(obj, 1, 2)	//{c:2,func:[function a]} 1 2


Function.prototype.myCall = function(context, ...args) {
	context = context || window
	let context.func = this
	let fn = context.func(...args)
	delete context.func
	return fn
}