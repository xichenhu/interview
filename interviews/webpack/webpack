一、构建
	查看版本：my-project ./node_modules/.bin/webpack -v  // 4.31.0

	运行：./node_modules/.bin/webpack 就可以去打包

	package.josn 中 "build": "webpack"；运行 npm run build 会自动打包，（原理:模块局部安装会在node_modules/.bin 目录创建软链接）


二、核心用法
	—— entry： 指定打包入口
		1、单入口：String
		2、多入口：Object:{key, value}
	—— Output：指定编译后文件的输出位置
		1、单入口：{filename: '', path: __dirname + '/dist'}
		2、多入口：{filename: '[name].js', // 通过占位符保证文件名称唯一。 path: __dirname + '/dist'}
	—— loaders：webpack开箱即用只支持JS和JSON两种文件类型，通过loaders去支持其他文件类型并把它们转化成有效的模块，并可以添加到依赖图中。loader本身是一个函数，接受源文件作为参数，返回转换的结果。
		1、用法
			module: {
				rules: [
					{
						test: '/\.txt$/', // 指定匹配规则
						use: ''	// 指定使用的loader名称
					}
				]
			}
	—— Plugins：插件用于bundle文件的优化,资源管理和环境变量注入，作用于整个构建过程，做loader没办法做到的事情。
		1、用法
			plugins: [new HtmlWebpackPlugin({template: './src/index.html'}) ]
	—— Mode：Mode用来指定当前的构建环境是: production, development还是none；设置mode可以使用webpack内置的函数, 默认值为production。


三、资源解析
	—— 解析ES6：使用babel-loader，babel的配置文件是: .babelrc，@ababel/preset-env
	—— 解析React JSX：@babel/preset-react
	—— 解析CSS：
		css-loader 用于加载.css文件,并且转换成commonjs对象【使webpack可以识别css模块】
		style-loader 将样式通过<style>标签插入到head中
	—— 解析图片：
		file-loader用于处理文件
	—— 解析字体：
		file-loader也可以用于处理字体
		url-loader 也可以处理图片和字体可以设置较小资源自动base64

四、文件监听
	—— 文件监听是在发现源码发生变化时,自动重新构建出新的输出文件。
	—— webpack开启监听模式,有两种方式:
		1、启动webpack命令时, 带上--watch参数【唯一缺陷:每次编译为需要手动刷新浏览器】
		2、在配置webpack.config.js中设置 watch:true

	—— 文件监听的原理分析
		轮询判断文件的最后编辑时间是否变化
		某个文件发生了变化,并不会立刻告诉监听者,而是先缓存起来等 aggregateTimeout

		module.export ={

			//默认false,也就是不开启
			watch: true,

			//只有开启监听模式时, watchOptions才有意义
			watchOptions: {

				//默认为空,不监听的文件或者文件夹,支持正则匹配
				ignored: /node_modules/,

				//监听到变化发生后会等300ms再去执行,默认300ms
				aggregateTimeout: 300,

				//判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的,默认每秒问1000次
				poll: 1000
			}
		}	
 五、热更新
 	—— webpack-dev-server
	 	WDS不刷新浏览器
		WDS不输出文件,而是放在内存中
		使用HotModuleReplacementPlugin插件

	—— 使用webpack-dev-middleware

	—— 热更新的原理分析
		Webpack Compile:将JS编译成Bundle
		HMR Server:将热更新的文件输出给HMR Rumtime
		Bundle server:提供文件在浏览器的访问
		HMR Rumtime:会被注入到浏览器,
		更新文件的变化
		bundle.js:构建输出的文件
六、文件指纹
	Hash:和整个项目的构建相关,只要项目文件有修改,整个项目构建的hash值就会更改
	Chunkhash:和webpack打包的chunk有关,不同的entry会生成不同的chunkhash值
	Contenthash:根据文件内容来定义hash ,文件内容不变,则contenthash不变

	—— JS的文件指纹设置
		设置output的filename,使用[chunkhash]
	—— CSS的文件指纹设置
		设置MiniCssExtractPlugin的filename,使用[contenthash]
	—— 图片的文件指纹设置
		设置file-loader的name,使用[hash]

七、代码压缩
	—— HTML压缩
		修改html-webpack-plugin,设置压缩参数【minify】

	—— CSS压缩
		使用optimize-css-assets-webpack-plugin
		同时使用cssnano

	—— JS文件压缩
		内置了uglifyjs-webpack-plugin


































































