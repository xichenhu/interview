一、原型、原型链
二、作用域、闭包
	—— 函数声明
		fn() // 不会报错
		function fn () { // 函数声明会提前

		}
	—— 函数表达式
		fn1() //报错
		var fn1 = function () { // 函数表达式

		}

	—— 题目
		1、说一下变量提升的理解
		2、说明this几种不同的使用场景
		3、创建10个<a>标签，点击的时候弹出来对应的序号
		4、如何创建作用域
		5、实际开发中必报的应用
	—— 知识点
		1、执行上下文
			console.log(a) //undefined
			var a = 100

			fn('zhangsan') // 'zhangsan' 20
			function fn () {
				age = 20
				console.log(name, age)
				var age
			}

			—— 范围：一段<script>或者一个函数
			—— 全局：变量定义、函数声明 一段<script>
			—— 函数：变量定义、函数声明、this、arguments 函数
			PS：注意“函数声明”和“函数表达式”的区别

		2、this
			—— this要在执行时才能确认，定义时无法确认
				var a = {
					name: 'A',
					fn: function() {
						console.log(this.name)
					}
				}
				a.fn() // this === a
				a.fn.call({name: 'B'})
				var fn1 = a.fn // this === {name: 'B'}
				fn1() // this === window
			—— 作为构造函数执行
				function Foo(name){
					this.name =name
					// return this
				}
				var f = new Foo('zhangsan')
			—— 作为对象属性执行
				var obj = {
					name: 'S',
					printName: function () {
						console.log(this.name)
					}
				}
				obj.printName()
			—— 作为普通函数执行
				function fn () {
					console.log(this) // this===window
				}
				fn()
			—— call apply bind
				function fn1(name, age) {
					alert(name)
					console.log(this)
				}
				fn1.call({x:100}, 'zhangsan', 20)
				fn1.apply({x:100}, ['zhangsan', 20])

				var fn2 = function(name, age) {
					alert(name)
					console.log(this)
				}.bind({x:200})
				fn2('zhangsan', 20)

		3、作用域
			—— 没有块级作用域
				if(true) {
					var name = 'zhangsan'
				}
				console.log(name)  // zhangsan

			—— 函数和全局作用域
				var a = 100
				function fn () {
					var a = 200
					console.log('fn', a)
				}
				console.log('global', a)
				fn()
		4、作用域链
			var a = 100
			function fn1() {
				var b = 200
				function fn2() {
					var c = 300
					// 当前作用域没有定义的变量，即“自由变量”
					console.log(a) // a是自由变量
					console.log(b)	// b是自由变量
					console.log(c)
				}
				fn2()
			}
			fn1()

		5、闭包
			—— 函数作为返回值
				function F1() {
					var a = 100
					return function() {
						console.log(a) // 自由变量，父作用域寻找
					}
				}
				var fn1 = F1()
				var a = 200
				f1() // 100

			—— 函数作为参数传递
				function F1() {
					var a = 100
					return function() {
						console.log(a) // 自由变量在父作用中查找
					}
				}
				var f1 = f1()

				function F2(fn) {
					var a = 200
					fn()
				}
				F2(f1)


				var i, a
				for(i = 0; i <10; i++) {
					(function(i){
						var a = doucment.creatElement('a')
						a.innerHTML = i + '<br>'
						a.addEventListener('click', function(e){
							e.preventDefault()
							alert(i)
						})
						document.body.appendChild(a)
					})(i)
				}

				function isFirstLoad() {
					var _list = []
					return function(id) {
						if (_list.indexOf(id) >= 0) {
							return false
						} else {
							return true
						}
					}
				}
				var firstLoad = isFirstLoad()
				firstLoad(10)	// false
				firstLoad(20)	// false
				firstLoad(20)	// true
				firstLoad(10)	// true

				// 你在isFirstLoad 函数外面，根本不可能修改掉 _list 的值


三、异步、单线程
	—— 题目
		1、同步和异步的区别是什么？分别举一个同步和异步的例子
			—— 同步会阻塞代码执行，而异步不会
			—— alert是同步，setTimeout是异步
		2、一个关于setTimeout的笔试题
		3、前端使用异步的场景
			—— 定时任务： setTimeout，setInterval
			—— 网络请求： ajax请求，动态<img>加载
			—— 事件绑定

	—— 知识点
		1、什么是异步（对比同步）
			// 异步
				console.log(100)
				setTimeout(function(){
					console.log(200)
				}, 1000)
				console.log(300)
				// 执行结果： 100 300 200

			// 同步
				console.log(100)
				alert(200)
				console.log(300)

			—— 没有阻塞程序的进行
			—— 何时需要异步
				1、在可能发生等待的情况
				2、等待过程中不能像alert一样阻塞程序运行
				3、因此，所以“等待的情况”下需要异步
					—— 定时任务：setTimeout、setInterval
					—— 网络请求：ajax请求，动态<img>加载
					—— 事件绑定

		2、前端使用异步的场景
			// 网络请求
			console.log('start')
			$.get('./data.json',function(data){
				console.log(data)
			})
			console.log('end')

			// 网络请求
			console.log('start')
			var img = document.creatElement('img')
			img.onload = function() {
				console.log('loaded')
			}
			img.src = '/xxx.png'
			console.log('end')

			// 事件绑定
			console.log('start')
			document.getElementById('btn').addEventListener('click', function(){
				alert('clicked')
			})
			console.log('end')


		3、异步和单线程
			—— 执行第一行，打印100
			—— 执行setTimeout后，传入setTimeout的函数会被暂存起来，不会立即执行（单线程的特点，不能同时干两件事）
			—— 执行最后一行，打印300
			—— 待所有程序执行完，处于空闲状态时，会立马看有没有暂存起来的要执行。
			—— 发现暂存起来的setTimeout中的函数无需等待时间，就立即过来执行


四、面试题
	1、写一个原型链继承的例子
		知识点： 构造函数
			function Fun(name, age) {
				this.name = name
				this.age = age

				// return this //默认有这行
			}

			var f = new Fun('zhangsan', 20) // 创建多个对象

			知识点：构造函数-扩展
			 var a = {} 其实是var a = new Object()的语法糖
			 var a = [] 其实是var a = new Array()的语法糖
			 function Foo () {...} 其实是var Foo = new Function(...)的语法糖
			 使用instanceof判断一个函数是否是一个变量的构造函数

		答：
			// 动物
			function Animal(name) {
				this.eat = function() {
					console.log('animal eat')
				}
			}
			function Dog() {
				this.bark = function() {
					console.log(' dog bark')
				}
			}
			Dog.prototype = new Animal()

			var hashiqi = new Dog()

			// 创建示例
			var Dog = new Foo('zhangsan')
			f.printName = function() {
				console.log(this.name)
			}

	2、描述new一个对象的过程
		知识点： 原型规则和示例
			5条原型规则
				1、所有的引用类型（数组、对象、函数），都具有对象特性，即可以自由扩展属性（除了"null"以外）
				2、所有的引用类型（数组、对象、函数），都有一个_proto_属性（隐式原型），属性值是一个普通的对象
				3、所有的函数，都有一个prototype属性，属性值也是一个普通对象
				4、所有的引用类型（数组、对象、函数），__proto__属性值指向它的构造函数的“prototype”属性值
				5、当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__（即它的构造函数的prototype）中寻找。

					var a = {}; a.age = 100;
					var b = []; b.age = 100;
					function fn(){};
					fn.age = 100;

					console.log(a.__proto__);
					console.log(b.__proto__);
					console.log(fn.__proto__);

					console.log(fn.prototype);
					console.log(a.__proto__ === Object.prototype);


					// 构造函数
					function Foo(name) {
						this.name = name
					}
					Foo.prototype.alertName = function () {
						alert('this.name')
					}

					// 创建示例
					var f = new Foo('zhangsan')
					f.printName = function() {
						console.log(this.name)
					}

					//测试
					f.printName()
					f.alertName()

				—— 循环对象自身的属性
					for(var item in f) {
						// 高级浏览器已经在for in 中屏蔽了来自原型的属性
						// 建议加上，保证程序的健壮性
						if (f.hasOwnProperty(item)) {
							console.log(item)
						}
					}
		答：
			创建一个新对象
			this指向这个新对象
			执行代码，即对this赋值
			返回this

	3、zepto（或者其他框架）源码中如何使用原型链
		知识点：原型链
			// 构造函数
			function Foo(name) {
				this.name = name
			}
			Foo.prototype.alertName = function () {
				alert('this.name')
			}

			// 创建示例
			var f = new Foo('zhangsan')
			f.printName = function() {
				console.log(this.name)
			}

			//测试
			f.printName()
			f.alertName()
			f.toString() // 要去f.__proto__.__proto__中查找

			// Object.prototype.__proto__ 指向的是null

		知识点：instanceof
			f instanceof Foo 的判断逻辑是：
				f的__proto__. 一层一层往上，能否对应到Foo.propertype
				再试着判断f instance Object

		答：找课程学去吧“zepto设计和源码分析”

—— 扩展
	// 封装一个DOM查询
	function Elem(id) {
		this.elem = document.createElementById(id)
	}
	Elem.prototype.html = function (val) {
		if (val) {
			elem.innerHTML = val
			return this // 链式操作
		} else {
			return elem.innerHTML
		}
	}

	Elem.prototype.on = function (type, fn) {
		var elem = this.elem
		elem.addEventListener(type, fn)
		return this // 返回了调用的对象，本例子中即返回了div1
	}

	var div1 = new Elem('div1')
	console.log(div1.html())
	div1.html('<p>hello</p>')
	div1.on('click', function(){alert('hello click')})
	// 链式操作
	div1.html('<p>hello</p>').on('click', function(){alert('hello click')}).html('<p>hello</p>')

—— 其他知识
	1、题目
		—— 获取2017-06-10格式的日期
		—— 获取随机数，要求长度一直的字符串格式
		—— 写一个能遍历对象和数组的通用forEach函数
	2、知识点
		—— 日期
		—— Math
		—— 数组API
		—— 对象API
	3、代码演示
		—— 日期
			Date.now() // 获取当前时间毫秒数
			var dat = new Date()
			dt.getTime() // 获取毫秒数
			dt.getFullYear() // 年
			dt.getMonth()		// 月
			dt.getDate()		// 日
			dt.getHours()		// 小时
			dt.getMinutes()		//分钟
			dt.getSeconds() 	// 秒
		—— Math
			获取随机数 Math.random()
		—— 数组API	
			forEach 遍历所有元素
			every 判断所有元素是否都符合条件
			some 判断是否有至少一个元素符合条件
			sort 排序
			map 对元素重新组装，生成新数组
			filter 过滤符合条件的元素
		—— 对象API
			var obj = {
				x: 100,
				y: 200,
				z: 300
			}
			var key
			for(key in obj) {
				if (obj.hasOwnProperty(key)) {
					console.log(key, obj[key])
				}
			}
	4、问题解答
		—— 获取2017-06-10格式的日期
			function formatDate(dt) {
				if (!dt) {
					dt = new Date()
				}
				var year = dt.getFullYear()
				var month = dt.getMonth() + 1
				var date = dt.getDate()
				if (month < 10) {
					month = "0" + month
				}
				if (date < 10) {
					date = '0' + date
				}
				return year + '-' +  month + '-' + date
			}
			var dt = new Date()
			var formatDate = formatDate(dt)
			console.log(formatDate)

		—— 获取随机数，要求是长度一直的字符串格式
			var random = Math.random()
			var random = random + '0000000000'
			var random = random.slice(0,10)
			console.log(random)
		—— 写一个能便利对象和数组的通用forEach函数
			function forEach(obj,fn){
				var key 
				if (obj instanceof Array) {
					obj.forEach(function(item,index){
						fn(index, item)
					}) else {
						for(key in obj) {
							fn(key, obj[key])
						}
					}
				}
			}

			var arr = [1,2,3]
			forEach(arr, function (index, item) {
				console.log(index, item)
			})
			var obj = {x:100, y:200}
			forEach(obj, function(key, value){
				console.log(key,value)
			})

















