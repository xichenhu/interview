一、页面渲染
	—— 浏览器就可以通过访问链接来得到页面的内容，通过绘制和渲染，显示出页面的最终的样子，整个过程中，我们需要考虑什么？
	—— 知识点
		1、页面加载过程
			—— 题目
				1、从输入URL到得到html的详细过程
				2、window.onload 和 DOMContentLoaded的区别
					window.addEventListener('load',function() {
						// 页面的全部资源加载完成才会执行，包括图片、视频等
					})
					window.addEventListener('DOMContentLoaded', function(){
						// DOM 渲染完即可执行，此时图片、视频还可能没有加载完
					})

			—— 知识点
				1、加载资源的形式
					—— 输入URL（或跳转页面）加载html
					—— http：//coding.com
					—— 加载html中的静态资源
					—— <script src="/static/js/jquery.js">

				2、加载一个资源的过程
					—— 浏览器根据DNS服务器得到域名的IP地址
					—— 向这个IP的机器发送http请求
					—— 服务器收到、处理并返回http请求
					—— 浏览器得到返回内容

				3、浏览器渲染页面的过程
					—— 根据html结构生成DOM Tree
					—— 根据CSS生成CSSDOM
					—— 将DOM和CSSDOM整合形成RenderTree
					—— 根据Render Tree开始渲染和展示
					—— 遇到<script>时，会执行并阻塞渲染

			—— 解答
				1、从输入URL到得到html的详细过程
					—— 浏览器根据DNS服务器得到域名的IP地址
					—— 向这个IP的机器发送http请求
					—— 服务器收到、处理并返回http请求
					—— 浏览器得到返回内容
				2、window.onload 和 DOMContentLoaded的区别
					—— window.onload：页面的全部资源加载完成才会执行，包括图片、视频等
					—— DOMContentLoaded：DOM 渲染完即可执行，此时图片、视频还可能没有加载完

		2、性能优化
			—— 为何要把CSS放到head中？
			—— 为何把Javascript代码放到body之后？

			—— 原则
				1、多使用内存、缓存或者其他方法
				2、减少CUP计算、减少网络
			—— 从哪入手
				1、加载页面和静态资源
				2、页面渲染
			—— 加载资源优化
				1、静态资源合并压缩（JS合并、image合并、…………）
				2、静态资源缓存
					—— 通过链接名称控制缓存
					—— <script src="abc_1.js"></script>
					—— 只有内容改变的时候，链接名称才会改变（浏览器自动缓存）
					—— <script src="abc_2.js"></script>

				3、使用CDN让资源加载更快
				4、使用SSR后端渲染，数据直接输出到HTML中
					—— 现在Vu React提出了这样的概念
					—— 其实JSP PHP ASP都属于后端渲染

			—— 渲染优化
				1、CSS放前面，JS放后面
				2、懒加载（图片懒加载、下拉加载更多）
					<img id="img1" src="smallImage.png" data-realsrc="originImage.png">
					<script type="text/javascript">
						var img1 = document.getElementById('img1')
						img1.src = img1.getAttribute('data-realsrc')
					</script>

				3、减少DOM查询，对DOM查询做缓存
					// 为缓存DOM查询
					for(var i=0;i<document.getElementsByTagName('p').length, i++){

					}

					// 缓存DOM查询
					var pList = document.getElementsByTagName('p')
					for(var i = 0; i < pList.lenght; i++) {

					}

				4、减少DOM操作，多个操作尽量合并在一起执行
					var listNode = document.getElementById('list')
					// 需要插入10个li标签
					var frag = document.createDocumentFragment();
					var x, li;
					for(x=0;x<10;x++) {
						li=document.createElement("li")
						li.innerHTML = "List item" + x;
						frag.appendChild(li);
					}

					listNode.appendChild(frag);

				5、事件节流
					var textarea = document.getElementById('text')
					var timeoutId
					textarea.addEventListtener('keyup', function(){
						if (timeoutId) {
							clearTimeout(timeoutId)
						}
						timeoutId = setTimeout(function(){
							// 触发change事件
						}, 100)
					})

				6、尽早执行操作（如：DOMContentLoaded)
					window.addEventListener('DOMContentLoaded', function(){
						// DOM 渲染完即可执行，此时图片、视频还可能没有加载完
					})

		3、安全性
			—— 知识点
				1、XSS跨站请求攻击
					—— 在新浪博客写一篇文章，同时偷偷插入一段<script>
					—— 攻击代码，获取cookie，发送到自己的服务器
					—— 发布博客，有人查看博客内容
					—— 会把查看者的cookie发送到攻击者的服务器上
					—— 预防
						1、前端替换关键字，例如替换< 为&lt; > 为 &gt;
						2、后端替换比较好（前端只有一个浏览器，后端依赖于服务器的能力，可以扩展内核和内存，前端替换会影响性能）

				2、XSRF跨站请求伪造
					—— 你已经登录一个购物网站，正在浏览商品
					—— 该网站付费接口是xxx.com/pay?id=100但是没有任何验证
					—— 然后你收到一封邮件，隐藏着<img src=xxx.com/pay?id=100>
					—— 你查看邮件的时候，就已经悄悄的付费购买了
					—— 预防
						1、增加验证流程，如输入指纹、密码、短信验证码（前端配合后端，后端来做）










