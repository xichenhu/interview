一、搭建一个脚手架
	—— 核心功能：模板拷贝
	—— 思路
		模板支持版本管理
		支持扩展新模板
		自动检测版本更新
		根据用户选择，生成个性化模板
		友好的UI界面
		构建功能独立，可因模板而异 (如区分H5/PC/weapp/RN)
		多人合作项目，能确保构建结果一致

	—— 思路解析
		3.1 模板支持版本管理
			比如用户使用 v1.0.0 的模板创建了项目，半年后，已经迭代升级到了 v2.0.0。我们需要依旧能够找到 v1.0.0 版本，因为老用户不想或者不方便升级。

			像我之前的雏形脚手架，将模板打一个压缩包放在云服务器上是不可行的，一旦更新就全量替换了

			npm 仓库天然支持版本管理，因此将模板发布到 npm 上自然解决了这个问题 (非开源项目，可考虑自建仓库或者私有的仓库)
		3.2 支持扩展新模板
			比如我们一开始我们的脚手架支持 H5 的模板。

			半年后，随着业务发展，需支持微信小程序的模板。

			此时，我们无需额外再开发一个 cli，而是让 cli 一开始设计的就支持扩展，这符合了开放封闭的设计原则
		3.3 自动检测版本更新
			npm 提供了一些命令来检测包的版本，比如你 npm view react version 返回 16.9.0，告知你最新版本

			借此，可以判断用户目前安装的是否最新版本，并提示用户更新
		3.4 根据用户选择，生成个性化模板
			模板虽说是为了统一，但也要在统一中支持差异，可通过问询用户，来提供差异化支持，比如：

			这些问询的结果，将影响我们最终的模板，比如我们根据是否 TypeScript 会在两套预设的模板中选一个套，将用户输入的「项目介绍」插入 package.json 的 description 字段等等
		3.5 友好的UI界面
			合适的格式、颜色、字体、进图条等，给与用户良好的信息反馈

			下文会介绍一些常用的库，来提供这些功能
		3.6 构建功能独立，可因模板而异
			我们通常使用 webpack 来构建/调试，对于不同的模板，构建流程存在较大差异，我们需要支持为不同的模板配置不同的构建

			因此构建能力也被抽离成单独的 npm 包，模板中可指定其构建包
		3.7 多人合作项目，能确保构建结果一致
			因为存在多版本，我们需要约束，让所有项目的贡献者的产出是一致的

			其核心原则就是：针对那些可能导致差异的因素，我们都收录到工程中，让 git 仓库记录，从而实现同样，因此，现在流行的脚手架，如 umi taro，都将 构建能力 local 化到本地工程中，后续会做详细阐明
			


























