白英玮 4月9号 3点面试 （https://blog.csdn.net/mmmmmmmmmmz/article/details/111879283）

—— 什么是BFC、如何产生BFC、BFC的作用
	1、BFC 全称为 块格式化上下文 (Block Formatting Context) 。
	2、https://www.jianshu.com/p/0d713b32cd0d
	3、如何产生BFC
		1、根元素(整个页面就是一个大的BFC)；
		2、float为 left | right；
		3、overflow为 hidden | auto | scroll；
		4、display为 inline-block | table-cell | table-caption | flex | inline-flex；
		5、position为 absolute | fixed；
	4、BFC的作用
		1、BFC的发生在这个垂直方向的边距会发生重叠
		2、BFC的区域不会与浮动元素的box重叠
		3、BFC在页面上是一个独立的容器，外面的元素不会影响到里边的元素，反过来里边的元素也不会影响到外面的元素【常用于清除浮动】
		4、计算BFC高度的时候浮动元素也会参与高度计算

—— 原型、原型链、继承
	1、JavaScript —— 原型、原型链、继承
	2、ES6 —— 继承

—— 作用域、闭包
	1、JavaScript —— this、全局、局部
	2、ES6	—— let

—— ES6 常用的特性

—— HTTP
	1、从输入url到页面加载完成发生了什么？（https://www.jianshu.com/p/0054fa46e22b）
	2、浏览器的缓存机制
		—— 浏览器缓存机制 304
			if(Cache-Control === no-store) {
				// 绝对禁止缓存，浏览器本地不会进行缓存，每次请求资源都要从服务器重新获取。
				直接向服务器获取资源（本地不缓存资源）
			} else if (Cache-Control === no-cache) {
				// 设置了no-cache之后并不代表浏览器不缓存，而是在获取缓存前要向服务器确认资源是否被更改。
				每次请求都想服务器确认资源是否被更改（本地缓存资源），走下面的协商缓存
			} else if (本地未过期=> max-age|| Expires) {
				使用浏览器本地缓存
			} else {
				if (Etag有值) {
					向服务器请求带 if-None-Match
					if(Etag与原来的一致) {
						返回304，直接使用本地缓存
					} else {
						返回200，获取新资源
					}
				} else if (Last-modified有值) {
					向服务器请求带 if-Modified-Since
					if (Last-modified与原来的一致) {
						返回304，直接使用本地缓存
					} else {
						返回200，获取新资源
					}
				} else {
					向服务器获取新资源，返回200
				}
			}
	3、HTTPS的加密过程
		1、服务器端用非对称加密(RSA)生成公钥和私钥
		2、然后把公钥发给客户端, 服务器则保存私钥
		3、客户端拿到公钥后, 会生成一个密钥, 这个密钥就是将来客户端和服务器用来通信的钥匙
		4、然后客户端用公钥对密钥进行加密, 再发给服务器
		5、服务器拿到客户端发来的加密后的密钥后, 再使用私钥解密密钥, 到此双方都获得通信的钥匙
	4、网络七层模型
		—— 物理层-数据链路层-网络层-传输层-会话层-表示层-应用层

—— webpack
	1、使用过webpack里面哪些plugin和loader
	2、webpack打包的整个过程
		从入口文件开始，建立依赖树 ——> 递归依赖树——> rules属性 -> test正则匹配文件，使用加载器，加载模块——> loader处理 ——> plugin ——> boundle.js 完成打包
	3、dev-server是怎么跑起来
	4、一般怎么组织CSS（Webpack）
	5、如何配置把js、css、html单独打包成一个文件
	6、webpack和gulp的优缺点
	7、使用webpack构建时有无做一些自定义操作
	8、webpack的热更新是如何做到的？说明其原理？
	9、webpack的loader, plugles 
		（Webpack配置(loader和plugin如何使用)：https://www.jianshu.com/p/d029a35d3501）
		（https://blog.csdn.net/weixin_39645003/article/details/111138925）
		（https://www.cnblogs.com/gaoht/p/11310365.html）
		
		style-loader(将处理结束的CSS代码存储在js中，运行时嵌入<style>后挂载至html页面上)  
		css-loader(使webpack可以识别css模块)  
		sass-loader(使webpack可以识别scss/sass文件)

		—— loader用于加载某些资源文件。因为webpack本身只能打包common.js规范的js文件，对于其他资源如css，img等，是没有办法加载的，这时就需要对应的loader将资源转化，从而进行加载。
		—— plugin用于扩展webpack的功能。不同于loader，plugin的功能更加丰富，比如压缩打包，优化，不只局限于资源的加载。
		—— 常用 loader
			1、处理 css
				—— style-loader
				—— css-loader
			2、处理less
				—— syle-loader
				—— css-loader
				—— less-loader (less-loader依赖于less，所以要一并安装)
			3、处理css图片资源
				—— url-loader (依赖于file-loader，所以要一并安装,可以指定其限制用base64 )
			4、处理html图片资源
				—— html-loader(注意该loader的模块化方式与url-loader不一致，需要将url-loader的配置中esModule改为false)
			5、处理其他资源(如：字体文件等)
				—— file-loader
		—— 常用plugins
			1、html编译
				—— html-webpack-plugin
			2、提取css文件
				—— mini-css-extract-plugin（如果用了此插件，那么就不能使用style-loader处理css文件了，需要用mcep.loader替换style-loader）

—— React（https://www.jianshu.com/p/9ce5b647313f）
	1、React 中的箭头函数是什么？怎么用？
		箭头函数（=>）是用于编写函数表达式的简短语法。这些函数允许正确绑定组件的上下文，因为在 ES6 中默认下不能使用自动绑定。使用高阶函数时，箭头函数非常有用。
		//General way
		render() {    
		    return(
		        <MyInput onChange = {this.handleChange.bind(this) } />
		    );
		}
		//With Arrow Function
		render() {  
		    return(
		        <MyInput onChange = { (e)=>this.handleOnChange(e) } />
		    );
		}
	2、React组件生命周期的阶段是什么？
		初始渲染阶段：这是组件即将开始其生命之旅并进入 DOM 的阶段。
		更新阶段：一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。
		卸载阶段：这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。
	3、如何模块化 React 中的代码？
	4、你对受控组件和非受控组件了解多少？
		受控组件										非受控组件
		1. 没有维持自己的状态							1. 保持着自己的状态
		2.数据由父组件控制								2.数据由 DOM 控制
		3. 通过 props 获取当前值，然后通过回调通知更改	3. Refs 用于获取其当前值

	5、单页面应用有什么优缺点
		优点：
			用户体验好，快，内容改变不需要刷新整个页面
			避免出现‘白屏’
		缺点：
			首次加载时间较长
			不利于SEO优化
			页面复杂度较高
	6、react 的diff算法
		1、节点之间的比较
		2、两个列表之间的比较
		3、取舍

—— Typescript（https://www.jianshu.com/p/c8aaba6e8ce0）
	1、Typescript有哪些基础类型？
	2、解释下Typescript的装饰器是什么？
	2、ts中的装饰器（https://www.jianshu.com/p/c8aaba6e8ce0）
		属性装饰器 -> 方法装饰器 -> 类装饰器
		装饰器是一种特殊类型的声明，它能被附加在类、方法、属性、访问符、参数上。
		装饰器使用@expression这种方式，expression求值后必须为一个函数，它在运行时调用，被装饰器声明的信息作为参数传入。

	3、说说什么Typescript中的泛型？作用是什么？
	4、什么是 Props 和 state，有什么区别 ?
		1. 从父组件中接收初始值	Yes	Yes
		2. 父组件可以改变值	No	Yes
		3. 在组件中设置默认值	Yes	Yes
		4. 在组件的内部变化	Yes	No
		5. 设置子组件的初始值	Yes	Yes
		6. 在子组件的内部更改	No	Yes
	
 —— Redux
 	1、Redux遵循的三个原则是什么？
 		单一事实来源：整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。
 		状态是只读的：改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。
 		使用纯函数进行更改：为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。
 	2、列出 Redux 的组件。
 		Action – 这是一个用来描述发生了什么事情的对象。
		Reducer – 这是一个确定状态将如何变化的地方。
		Store – 整个程序的状态/对象树保存在Store中。
		View – 只显示 Store 提供的数据。
	3、数据如何通过 Redux 流动？

—— 常见web安全及防护原理
	1、sql注入原理
	2、XSS原理及防范
	3、XSRF 跨站请求伪造

—— 安全性
	—— 知识点
		1、XSS 跨站请求攻击
			—— 例如： 再新浪博客写一篇文章，同事偷偷插入一段<script>；攻击代码中，获取cookie，发送自己的服务器。发布博客，有人查看博客内容，会把查看者的cookie发送到攻击者的服务器。盗用了用户账号信息。
			—— 预防：
				1、前端替换关键字，例如替换< 为 &lt； > 为 &gt；
				2、后端替换【替换速度更快，效率更高】

		2、XSRF 跨站请求伪造
			—— 你已登录一个购物网站，正在浏览商品；该网站付费接口是XXX.com/pay?id=100但是没有任何验证；然后你收到一封邮件，隐藏了<img src='XXX.com/pay?id=100'>;你查看邮件的时候，就已经悄悄的付费购买了
			—— 预防：
				1、增加验证流程，例如输入指纹、密码、短信验证码【前端配合后端】

—— 性能优化
	1、代码层面
	2、缓存利用
	3、请求数量
	4、请求带宽
	5、代码层面的优化
	6、浏览器渲染机制JS阻塞怎么办?
		—— 将js放在最后加载
		—— 监听onload 异步 加载


—— 常规问题
	1、有什么印象深刻的项目
	2、说一下自己的优缺点  
	3、平时是怎么学习的
	4、未来几年的职业规划
	5、工作中处理过的棘手问题 怎么处理的

















