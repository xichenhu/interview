一、算法面试的一个合理的思考路径
	—— 算法面试
		1、不代表能够“正确”回答每一个算法问题，有一个合理的思考方向其实更重要，也是正确的完成算法面试问题的一个前提
			—— “正确”本身是一个相对概念
				1、算法面试不是高考
				2、把这个过程看作是和面试官一起探讨一个问题的解决方案
				3、对于问题的细节和应用环境，可以和面试官沟通
				4、这种沟通本身很重要，它暗示着你思考问题的方式
			—— 例子
				1、我们需要对一组数据进行排序
					—— 这组数据有什么样的具体的特征？
						1、有没有可能包含有大量重复的元素？，如果有这种可能的话，三路快排是更好的选择。
						2、是否大部分数据距离它正确的位置很近？是否近乎有序？
						3、是否数据的取值范围非常有限？比如对学生成绩排序，如果是这样的话，技术排序是更好的选择
						4、对排序有什么额外的要求，是否需要稳定的排序，如果是的话，归并排序是更好的选择
						5、数据的存储状况是怎样的，是否是使用链表存储，如果是，归并排序是更好的选择
						6、数据大小是否可以装载在内存中，如果数据很大，或内存很小，不足以装载在内存里，需要使用外排序算法。
						7、独到的见解，优化，代码规范，容错性等等
						8、如果是非常难的问题，对你的竞争对手来说，也是难的。关键在于你所表达出的解决问题的思路，甚至通过表达解决思路的方向，得出结论：这个问题的解决方案，应该是在哪一个领域，我可以通过查阅或者进一步学习解决问题。
		2、算法面试优秀不意味着技术面试优秀
			—— 算法面试只是技术面试的一部分，根据简历不同和用人单位的不同。
			—— 项目经历和项目中遇到的实际问题
			—— 你遇到印象最深的bug是什么
			—— 面向对象
			—— 设计模式
			—— 网络相关，安全相关，内存相关，并发相关、系统设计、scalability、
			—— 技术面试只是面试的一部分。面试不仅仅是考察你的技术水平，还是料及你的过去以及形成的思考行为方式。
		3、技术面试优秀不意味能够拿到Offer
			—— 创建自己的项目
				1、自己做小应用：计划表、备忘录、播放器
				2、自己解决小问题：爬虫、数据分析、词频统计……
				3、不是项目的项目：一本优秀的技术书籍代码整理等……
			—— 通过过去来了解你的思考行为方式
				1、遇到的最大挑战？：在某某某项目中曾经遇到了这样的一个算法问题，这个算法问题大致是怎样的，这个算法问题是我面对的最大的挑战，面对这样的挑战我是这样克服和解决的。
				2、犯过的错误？
				3、遭遇的失败？
				4、最享受的工作内容？
				5、遇到冲突的处理方式？
				6、做过的最与众不同的事儿？
			—— 问面试官的问题？
				1、整个小组大概的运行模式是怎样的？
				2、整个项目的中长期规划和后续规划是如何的？
				3、这个产品中的某个问题是如何解决的？
				4、为什么会选择某些技术或者标准来实现项目需求？
				5、我对某个技术很感兴趣，在你的小组中我会有怎样的技术深入学习了解这项技术？
二、目的：面试算法不再畏惧（玩儿转算法面试)
	——、准备算法面试
		1、算法面试没有那么难
			—— 远远不需要啃完一本《算法导论》
				1、强调理论证明
			—— 高级数据结构和算法面试提及的概率很低
				1、红黑树、计算几何、B-tree、数论、斐波那契堆、FFT
				2、算法面试远远不需要达到信息学竞赛的水平。
			—— 算法面试的准备范围
				1、不要轻视算法基础和数据结构
					—— 各种排序算法
					—— 基础数据结构和算法实现：如堆、二叉树、图……
					—— 基础数据结构的使用：如链表、栈、队列、哈希表、图、Trie、并查集……
					—— 基础算法：深度优先、广度优先、二分查找、递归
					—— 基本算法思想：递归、分治、回溯搜索、贪心、动态规划……
				2、选择适合的OJ
					—— LeetCode：https://leetcode-cn.com/
					—— 在学习和实践做题中掌握一个平衡
			—— 解决算法面试问题的整体思路
				1、注意题目中的条件
					—— 给定的是一个有序数组，
					—— 有些题目中的条件本质是暗示：
						1、设计一个O(nlogn)的算法——分布法，搜索树中实现，先对整个数组进行排序
						2、无需考虑额外的空间——是否需要开辟额外的空间换取时间上的优化
						3、数据规模大概是10000——O(n2)就可以解决问题
				2、当没有思路的时候
					—— 自己给自己几个测试用例，实验一下
					—— 不要忽视暴力解法，暴力解法通常是思考的起点
						1、在一个字符串中寻找没有重复字母的最长子串（例如：abcabcbb,结果为abc; 如是bbbbb结果是b）
					—— 优化算法
						1、在脑中遍历常见的算法思路
						2、遍历常见的数据结构
						3、空间和时间交换（哈希表）
						4、预处理信息（排序）
						5、实际编写问题
							—— 极端条件判断
								1、数组为空？字符串为空？数量为0？指针为MULL？
								2、变量名语义化
								3、模块化、复用性
				3、基本问题做到白板编程	

三、简单了解下算法问题，具备简单算法素质
 —— 面试中时间复杂度的分析
 	1、到底什么是Big O
 	2、n是数据规模
















































