function combine(arr, m, arr1, n) {
	let index1 = m - 1;
	let index2 = n - 1;
	let maxIndex = m + n - 1;
	while(index2 >= 0) {
		if (index1 >= 0) {
			arr[maxIndex--] = arr[index1] > arr1[index2] ? arr[index1--] : arr1[index2--];
		} else {
			arr[maxIndex--] = arr1[index2--]
		}
	}
}

// 题目解析
/*
1、循环并入的数组
2、两个数组的数值从后往前比较
3、把两个数组中最大的那个数值存入合并后的数组中最大索引的位置
4、然后在把比较出的最大值那个数组的索引减一，继续跟数值小的那个数组的当前索引位置的数值做比较。
5、保证了每次比较得出最大的数值存入数组中。
6、考虑两个临界情况
	1、被并入的数组的索引值先比较完即index的值小于0，剩下的要并入的数组的值，直接按位存入被并入后的数组中。
	2、要并入的数组的索引先比较完即index的值小于0，那就不需要再比较了，因为要并入的数据已经全部按照大小存入到被并入后的数组中。被并入数组没有接受比较的数值原位不动就行。


[1,3,5]
[2,4,6,8]

[1,2,3,4,5,6,8]
*/
