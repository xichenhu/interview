HTML
	HTML5 有哪些新特性？
		1、语义化：<header></header><nav></nav>
		2、绘画canvas
		3、SVG绘画
		4、视频和音频，用于媒介的video和audio元素
		5、input增强型表单控件：calendar、date、time、email、url、search
		6、本地离线存储LocalStorage长期存储数据，浏览器关闭后数据不丢失，Session
		7、新的技术webworker，websocktGeolocation

	HTML5 移除的元素？
		纯表现的元素：basefont,big,center,font,s,strike,tt,u;
		对可用性产生负面影响的元素：frame,frameset,noframes;

	Doctype作⽤? 严格模式与混杂模式如何区分？它们有何意义?
		<!DOCTYPE>声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。<!DOCTYPE>声明必须在 HTML 文档的第一行，这并不是一个 HTML 标签。
		严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。
		混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。
		如何区分：浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。
			1、如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） 
			2、包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） 
			3、DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）
			4、HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）
		意义：严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。

	如何实现浏览器内多个标签页之间的通信？
		1、调用LocalStorage
			在一个标签页里面使用 localStorage.setItem(key,value)添加（修改、删除）内容；
			在另一个标签页里面监听 storage 事件。
			即可得到 localstorge 存储的值，实现不同标签页之间的通信。
		2、Cookie + setInterval()
			将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。

	⾏内元素有哪些？块级元素有哪些？空(void)元素有哪些？⾏内元 素和块级元素有什么区别？
		⾏内元素有： a b span img input select strong
		块级元素有： div ul ol li dl dt dd h1 h2 h3 h4… p
		空元素： <br> <hr> <img> <input> <link> <meta>
		tip：行内块级元素是可以设置和块级一样设置宽高和边距的，此类元素有个别名 叫 置换元素 img input select 等

	简述⼀下src与href的区别？
		src用于替换当前元素
		href用于在当前文档和引用资源之间确立联系
		src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置
		href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接

	cookie、session,sessionStorage,localStorage 的区别？
		生命周期：
			LocalStorage生命周期是永久，除非主动清除localStorage信息，否则这些信息将永远存在。
			sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。
			如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。
		存储大小：
			LocalStorage存放的数据大小一般为5MB。
			sessionStorage存放数据大小为一般为5MB。
			cookie：单个cookie保存的数据不能超过4kb；session大小没有限制。
		通信方式：
			LocalStorage它仅仅在客户端（即浏览器）中保存，不参与和服务器的通信。
			sessionStorage它仅在客户端（即浏览器）中保存，不参与和服务器的通信。
			Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它。
			如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。
		存储形式：
			localStorage和sessionStorage存储是以键/值对的形式存储的，只能存储字符串类型。但当要存储的数据是一个对象或是数组的时候，直接存储是不行的，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理。
			cookie只能保存字符串类型，以文本的方式；session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)
		保持状态：
			cookie保存在浏览器端，session保存在服务器端，cookie和session都是用来跟踪浏览器用户身份的会话方式。
		安全性：
			cookie：针对cookie所存在的攻击：Cookie欺骗，Cookie截获；session的安全性大于cookie。
				原因如下：
					（1）sessionID存储在cookie中，若要攻破session首先要攻破cookie；
					（2）sessionID是要有人登录，或者启动session_start才会有，所以攻破cookie也不一定能得到sessionID；
					（3）第二次启动session_start后，前一次的sessionID就是失效了，session过期后，sessionID也随之失效。
					（4）sessionID是加密的
					（5）综上所述，攻击者必须在短时间内攻破加密的sessionID，这很难。
		应用场景：
			Cookie：
				（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。
				（2）保存上次登录的时间等信息。
				（3）保存上次查看的页面
				（4）浏览计数
			session：
				Session用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。
					（1）网上商城中的购物车
					（2）保存用户登录信息
					（3）将某些数据放入session中，供同一用户的不同页面使用
					（4）防止用户非法登录
			localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。
			sessionStorage：敏感账号一次性登录。
		缺点：
			cookie：
				（1）大小受限
				（2）用户可以操作（禁用）cookie，使功能受限
				（3）安全性较低
				（4）有些状态不可能保存在客户端。
				（5）每次访问都要传送cookie给服务器，浪费带宽。
				（6）cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。
			session：
				（1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。
				（2）依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全
				（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。
		优点：
			（1）存储空间更大：cookie为4KB，而WebStorage是5MB；
			（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；
			（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；
			（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；

	HTML5 的离线储存的使用和原理？
		原理：
			HTML5的离线存储是基于一个新建的.appcache文件的，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。
		使用：
			首先，在html页面头部加入一个manifest的属性:
				<!DOCTYPE HTML>
				<html manifest = "cache.manifest">
				...
				</html>
			然后书写cache.manifest文件：
				CACHE MANIFEST
				#v0.11

				CACHE:
				js/app.js
				css/style.css

				NETWORK:
				resourse/logo.png

				FALLBACK:
				/ /offline.html
			manifest （即 .appcache 文件）文件是简单的文本文件，可分为三个部分：
				CACHE ：
					在此标题下列出的文件将在首次下载后进行缓存。（由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身也列出来）
				NETWORK ：
					在此标题下列出的文件需要与服务器的连接，且不会被缓存，离线时无法使用。 
						可以使用 “*” 来指示所有其他资源/文件都需要因特网连接：
							NETWORK: *
					如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高。
				FALLBACK：
					在此标题下列出的文件规定当页面无法访问时的回退页面。比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。
		浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？
			在线的情况下：
				浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。
				如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。
			离线的情况下：
				浏览器就直接使用离线存储的资源。

	怎样处理 移动端 1px 被 渲染成 2px 问题？
		https://www.runoob.com/w3cnote/front-end-interview-a-few-important-points-of-knowledge.html
		https://www.axihe.com/focus/html/56.html
		1、局部处理
		   meta标签中的 viewport属性 ，initial-scale 设置为 1 
		   rem 按照设计稿标准走，外加利用transform 的scale(0.5) 缩小一倍即可；
		2、全局处理
		   meta标签中的 viewport属性 ，initial-scale 设置为 0.5
		   rem 按照设计稿标准走即可

	浏览器是如何渲染页面的？
		浏览器将域名通过网络通信从服务器拿到html文件后，如何渲染页面呢？
			1.根据html文件构建DOM树和CSSOM树。构建DOM树期间，如果遇到JS，阻塞DOM树及CSSOM树的构建，优先加载JS文件，加载完毕，再继续构建DOM树及CSSOM树。
			2.构建渲染树（Render Tree）。
			3.页面的重绘（repaint）与重排（reflow，也有称回流）。页面渲染完成后，若JS操作了DOM节点，根据JS对DOM操作动作的大小，浏览器对页面进行重绘或是重排。
				重绘：当页面元素样式的改变不影响元素在文档流中的位置时（例如background-color, border-color,visibility）,浏览器只会将新样式赋予元素并进行重绘操作。
				重排：当改变影响文档内容或者结构，或者元素位置时，回流操作就会被触发，一般有以下几种情况：
					当页面布局和几何属性改变时就需要重排。下述情况会发生浏览器重排：
						1、DOM操作（对元素的增删改，顺序变化等）；
						2、内容变化，包括表单区域内的文本改变；
						3、CSS属性的更改或重新计算（元素尺寸改变——边距、填充、边框、宽度和高度）；
						4、内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变；
						5、增删样式表内容；
						6、修改class属性；
						7、浏览器窗口变化（滚动或缩放）；
						8、伪类样式激活（:hover等）。
				注意：重排必将引起重绘，而重绘不一定会引起重排。
				如何减少和避免重排？

	iframe 的优缺点？
		优点：
			1.iframe能够原封不动的把嵌入的网页展现出来。
			2.如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。
			3.网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。
			4.如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。
		缺点：
			1.会产生很多页面，不容易管理。
			2.iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。
			3.代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化。
			4.很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。
			5.iframe框架页面会增加服务器的http请求，对于大型网站是不可取的。

	Canvas 和 SVG 图形的区别是什么？
		首先我们从时间上看canvas与svg的区别：
			canvas是html5提供的新元素<canvas>，而svg存在的历史要比canvas久远，已经有十几年了。
			svg并不是html5专有的标签，最初svg是用xml技术（超文本扩展语言，可以自定义标签或属性）描述二维图形的语言。
		其次我们从功能上看canvas与svg的区别：
			SVG 是一种使用 XML 描述 2D 图形的语言。
				SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。
				在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。
			Canvas 通过 JavaScript 来绘制 2D 图形。
				Canvas 是逐像素进行渲染的。
				在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。
		canvas与svg技术应用上的比较：
			canvas依赖分辨率。
			canvas支持事件处理器。
			canvas最适合带有大型渲染区域的应用程序（比如谷歌地图）。
			canvas复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）。
			canvas不适合游戏应用。
			svg不依赖分辨率。
			svg不支持事件处理器。
			svg弱的文本渲染能力。
			svg能够以 .png 或 .jpg 格式保存结果图像。
			svg最适合图像密集型的游戏，其中的许多对象会被频繁重绘。

	谈一谈meta 标签？
		The <meta> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.
		https://zhuanlan.zhihu.com/p/70043383


CSS
	请你讲一讲 CSS 的权重和优先级
		权重
			!important
			行内样式+1000
			id选择器+100
			属性选择器、class或者伪类+10
			元素选择器，或者伪元素+1
			通配符+0
		每一组选择器在判断优先级的时，是相加的关系，举例：
			#id .class span{
				// 权重是 100+10+1 = 111
			}
		使用 !important 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找bug变得更加困难了。
		总结：
			每一组选择器在判断优先级的时，是相加的关系
			一定要优先考虑使用样式规则的优先级来解决问题而不是 !important
			只有在需要覆盖全站或外部 CSS 的特定页面中使用 !important
			永远不要在你的插件中使用 !important
			永远不要在全站范围的 CSS 代码中使用 !important
		为目标元素直接添加样式，永远比继承样式的优先级高。

	介绍 Flex 布局，flex 是什么属性的缩写：
		flex-grow
		flex-shrink
		flex-basis

	CSS 怎么画一个大小为父元素宽度一半的正方形？
		div {
			width: 50%;
		    background: orangered;
		    padding-bottom: 50%; 	// padding-bottom %（定义基于父元素宽度的百分比下内边距。此值不会如预期地那样工作于所有的浏览器中。）
		}

	CSS实现自适应正方形、等宽高比矩形
		1、利用子元素将父元素撑起来，利用margin-top，但是要注意margin塌陷的问题
			.container{
			  overflow:hidden;//触发BFC解决margin问题
			  width:100%;
			}
			.container:after{
			  content:"";
			  margin-top:100%;
			  display:block; //块级元素才可以有垂直方向上的margin
			}
		2、

	BFC会与float元素相互覆盖吗？为什么？举例说明
		不会。https://zhuanlan.zhihu.com/p/58675679?from_voters_page=true

	了解盒模型吗？
		盒模型：内容区域 > 内边距 > 边框 > 外边距
		CSS中通过box-sizing属性将盒模型分为两种：
			content-box：默认盒模型，宽度为内容宽度
			border-box：宽度为内容宽度+内边距+边框

	清除浮动有哪些方法？
		.clearFix::after{
		    content:"",
		    display:block;
		    clear:both
		}
		/* 我只推荐用这一种 */

	visibility 和 display 的差别（还有opacity)
		1. opacity: 0; /* 响应用户交互 */
		2. visibility: hidden /* 不响应用户交互，元素消失后依然占据空间，触发浏览器重绘 */
		3. display: none; /* 为这个属性添加过渡动画无效，依然能进行DOM操作，切换可见性触发浏览器重排和重绘 */

	用css2和css3分别写一下垂直居中和水平居中
		CSS2
			.box {
				width: 200px;
				height: 200px;
				background: red;
				position: relative;
			}
			.child {
				width: 80px;
				height: 40px;
				background-color: green;
				positon: absolute;
				top: 0;
				left: 0;
				bottom: 0;
				right: 0;
			}

			.box {
				width: 200px;
				height: 200px;
				background: red;
				position: relative;
			}
			.child {
				width: 80px;
				height: 40px;
				background-color: green;
				positon: absolute;
				top: 50%;
				left: 50%;
				margin-top: -20px;
				margin-left: -40px;
			}
		CSS3
			.box {
				width: 200px;
				height: 200px;
				background: red;
				display: flex;
				align-items: center;
				justify-content: center;
			}
			.child {
				width: 80px;
				height: 40px;
				background-color: green;
			}

			.box {
				width: 200px;
				height: 200px;
				background: red;
				position: relative;
			}
			.child {
				width: 80px;
				height: 40px;
				background-color: green;
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%)
			}

JavaScript
	https://developer.51cto.com/art/202102/644120.htm
	Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办
		Number类型的最大值为2的53次方，即9007199254740992，如果超过这个值，比如900719925474099222，那么得到的值会不精确，会发生截断，也就是900719925474099200
	
	JS 有哪些数据类型？
		基本类型：Number、Boolean、String、null、undefined、symbol(ES6 新增的)，BigInt(ES2020) 
		引用类型：Object，对象子类型(Array，Function)

	JS 整数是怎么表示的？
		

VUE
	Vue的双向数据绑定原理是什么?
		vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。
			第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter,这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化
			第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图
			第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:
				1、在自身实例化时往属性订阅器(dep)里面添加自己
				2、自身必须有一个update()方法
				3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。
			第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化-> 视图更新;视图交互变化(input) -> 数据model变更的双向绑定效果。

	请详细说下你对vue生命周期的理解?
		总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。
		创建前/后：在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。
		载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。
		更新前/后：当data变化时，会触发beforeUpdate和updated方法。
		销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在

	请说下封装vue 组件的过程?
		首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。

	你是怎么认识vuex的?
		vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring 等。通过状态(数据源)集中管理驱动组件的变化(好比spring的IOC容器对bean进行集中管理)。
		应用级的状态集中放在store中; 改变状态的方式是提交mutations，这是个同步的事物; 异步逻辑应该封装在action中。

	请说出vue.cli项目中src目录每个文件夹和文件的用法?
		assets文件夹是放静态资源;components是放组件;router是定义路由相关的配置;view视图;app.vue是一个应用主组件;main.js是入口文件

	vue.cli中怎样使用自定义的组件?有遇到过哪些问题吗?
		第一步：在components目录新建你的组件文件(smithButton.vue)，script一定要export default {}
		第二步：在需要用的页面(组件)中导入：import smithButton from ‘../components/smithButton.vue’
		第三步：注入到vue的子组件的components属性上面,components:{smithButton}
		第四步：在template视图view中使用，
		问题有：smithButton命名，使用的时候则smith-button

	聊聊你对Vue.js的template编译的理解?
		简而言之，就是先转化成AST树，再得到的render函数返回VNode(Vue的虚拟DOM节点)
		详情步骤：
			首先，通过compile编译器把template编译成AST语法树(abstract syntax tree 即源代码的抽象语法结构的树状表现形式)，compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。
			然后，AST会经过generate(将AST语法树转化成render funtion字符串的过程)得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有(标签名、子节点、文本等等)

	说下vue组件之间的通信？（https://www.cnblogs.com/barryzhang/p/10566515.html）
		1.props和$emit
			父组件向子组件传递数据是通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的.
		2.$attrs和$listeners
			第一种方式处理父子组件之间的数据传输有一个问题：如果父组件A下面有子组件B，组件B下面有组件C,这时如果组件A想传递数据给组件C怎么办呢？ 如果采用第一种方法，我们必须让组件A通过prop传递消息给组件B，组件B在通过prop传递消息给组件C；要是组件A和组件C之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4开始提供了$attrs和$listeners来解决这个问题，能够让组件A之间传递消息给组件C。
		3. 中央事件总线
			上面两种方式处理的都是父子组件之间的数据传递，而如果两个组件不是父子关系呢？这种情况下可以使用中央事件总线的方式。新建一个Vue事件bus对象，然后通过bus.$emit触发事件，bus.$on监听触发的事件。
		4. provide和inject
			在 Vue.js 的 2.2.0+ 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。
			父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。而不是局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。
		5. v-model
			父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input',val)自动修改v-model绑定的值
		6. $parent和$children
			在组件内部可以直接通过子组件$parent对父组件进行操作，父组件通过$children对子组件进行操作.
		7. vuex处理组件之间的数据交互
			如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。
























































