HTML
	—— <img>的title和alt有什么区别?
		1、alt： 图片加载失败时，显示在网页上的替代文字
		2、title： 鼠标放在上面时显示的文字
		3、alt 是必要属性，title 非必要

	—— html5有哪些新特性、移除了那些元素？
		（1）新增特性
		　　a、新增标签 
		　　    article、aside、audio、bdi、canvas、command、datalist、details、embed、figcaption、figure、footer、header、 hgroup、keygen、mark、meter、nav、output、progress、rp、rt、ruby、section、source、summary、time、track、video
		　　    其中常用标签：article、aside、audio、video、canvas、footer、header、nav、section
		　　b、新增localStorage、sessionStorage
		　　c、新增contenteditable属性 （任何dom节点只要加上contenteditable="true"就可以变得可编辑）
		　　d、Geolocation 地理定位

		（2）移除特性
			<basefont> 默认字体，不设置字体，以此渲染
			<font> 字体标签
			<center> 水平居中
			<u> 下划线
			<big> 大字体 
			<strike> 中横线
			<tt> 文本等宽
	—— WEB标准以及W3C标准是什么?
		1、标签闭合
		2、标签小写
		3、嵌套正确
		4、外部链接css和js
		5、提倡结构、表现和行为相分离（HTML结构、CSS表现、JavaScript行为）

	—— Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?
		1. <!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器以何种模式来渲染文档。 
		2. 严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。
		3. 在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。
		4. DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。

	—— 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？
		1、行内元素有：a b span img input select strong
		2、块级元素有：div ul ol li dl dt dd h1 h2 h3 h4… p
		3、空元素：br hr img input link meta

		—— 行内元素
			1、设置宽高无效
			2、对margin仅设置左右方向有效，上下无效；padding上下左右都有效，会撑大空间
			3、不会自动进行换行

		—— 块级元素
			1、能够识别设置宽高
			2、margin和padding的上下左右均对其有效
			3、独占一行

	—— HTML全局属性(global attribute)有哪些
		html属性赋予元素意义和语境，可以用于任何的html元素
			1、class：为元素设置类标识
			2、data-*：为元素增加自定义属性
			3、id：元素id，文档内唯一
			4、lang：元素内容的语言
			5、style：行内css样式
			6、title：元素相关的建议信息
			7、dir：规定元素中内容的文本方向（ltr：从左到右， rtl：从右到左）
			8、contenteditable：html新增属性，设置true后可编辑元素
			9、hidden：隐藏一个html元素

	—— Canvas和SVG有什么区别？
		Canvas
			1、可伸缩矢量图形 
			2、放大缩小不会失真
		SVG
			1、HTML5新加的元素
			2、使用XML描述2D图形的语言

	—— HTML5 为什么只需要写 <!DOCTYPE HTML>

CSS https://zhuanlan.zhihu.com/p/366941015
	—— 实现一个div在不同分辨率下的水平垂直居中？

	—— 左右固定，中间自适应样式？

	—— 阐述清楚浮动的几种方式（常见问题）
		1、浮动的产生
			float: left/right（设置后产生浮动）
			初衷：浮动原先的设计初衷是为了实现文字环绕效果
			结果：父元素高度塌陷，理解起来就是元素浮动飘起来了，失去高度，下面的元素会顶上来，就造成了原有的元素背景不见了，margin/padding也不能正常显示
		2、解决浮动的方法
			（1）clear: both，在元素最后下加一个元素设置clear：both属性，缺点是会增加多余无用的html元素
			（2）使用after伪元素
				.box 父元素
				.box::after {
				    content: ' ';
				    display: block;
				    clear: both;
				 }
			（3）给父元素设置明确的高度，缺点是并不是所有元素的高度都是固定
			（4）给父级元素设置overflow:hidden, 缺点：不能和position配合使用

	—— 解释css sprites ，如何使用？
		1、什么是精灵图
			将一些小图标放在一张图上
		2、精灵图的优点
			减少图片的总大小
			减少下载图片资源请求，减小建立连接的消耗

	—— box-sizing常用的属性有哪些？分别有什么作用？
		（1）content-box
			宽高是元素本身的宽高 不包含border+padding
		（2）border-box
			元素的宽高已经包含了border+padding
		（3）inherit
			从父元素继承box-sizing属性

	—— CSS样式覆盖规则
		!important > 内联样式 > id选择 > （class选择 = 伪类选择） > (标签选择 = 伪元素选择)

	—— 请简要描述margin重合问题，及解决方式
		问题：相邻两个盒子垂直方向上的margin会发生重叠，只会取比较大的margin
		解决：
		（1）设置padding代替margin
		（2）设置float
		（3）设置overflow
		（4）设置position：absolute 绝对定位
		（5）设置display： inline-block 

	—— 对<meta></meta>标签有什么理解
		1、meta是html文档头部的一个标签，这个标签对用户不可见，是给搜索引擎看的。
		2、meta标签属性用法分成两大类
			—— <meta name ="XXX content = "xxxxx"/>
				1、核心属性是name, content的内容那个是对name类型的具体描述,便于seo,常用的有以下
					—— title
					—— keywords:描述网站的关键字
					—— description:对于网站功能,主要内容的描述性信息
					—— viewport:用来做移动端网络适配的
					—— robots:告诉爬虫哪些页面需要索引,哪些不需要。其content可选参数为 all,none,index,noindex,follow,nofollow
					—— author:描述网页开发者信息
					—— generator :描述网页的开发工具
					—— copyright:描述版权信息

			—— <meta http-equiv = "xxxxx" content =xxxxx/>
				1、核心属性是http-equiv 
					—— content-type:后台告诉浏览器,此次响应报文的最基本信息
					—— X-UA-Compatible:用来指定1E8浏览器去模拟某个特定版本的IE浏览器的渲染方式,来解决部分兼容问题
					—— cache-control:告诉浏览器缓存机制

		3、<meta charset="UTF-8"> 使用的编码格式，大部分是utf-8


	—— display： none ； visibility：hidden区别？
		1、display: none 设置后，该元素在dom元素中消失,不再占用空间
		2、visibility: hidden 设置后,该元素存在的空间还在,只是不可见,以然会影响到页面布局；具有继承性；

	—— 重绘和回流（哪些情况重绘，哪些回流）
		1、重绘： 不会影响页面布局的操作,比如更改颜色
		2、回流： 布局的改变导致需要重新构建,就是回流
		3、回流必将引起重绘,重绘不一定会引起回流，比如：只有颜色改变的时候就只会发生重绘而不会引起回流当页面布局和几何属性改变时就需要回流
		1、重绘  
   			当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。
   		2、回流   
    		当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。
    		每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。

	—— 说说你对语义化的理解?
		1、根据内容的结构选择适合的标签
		2、样式丢失或者去掉样式后,页面任然可以呈现出清晰的结构
		3、有利于SEO,让爬虫可以抓到更多有效信息
		4、方便其他设备渲染网页(盲人阅读器等)
		5、更具可读性,便于团队开发维护

	—— 为什么要初始化css样式？
		因为浏览器的兼容问题，不同浏览器对有些标签的默认值不同，如果不初始化css，会导致不同浏览器页面间的显示差异。

	—— 移动端适配1px问题
		问题:移动端的1px在有些机型上看上去比较粗,虽然写着1px但看上去的效果可能是2px
		伪类+transform方法,原理是把原先元素的border去掉,然后利用:before或者:after重做border,并transform的scale缩小一半,原先的元素相对定位,新做的border绝对定位。
			.hairlines li{
			  position: relative;
			  border:none;
			  margin-top: 10px;
			}
			.hairlines li:after{
			  content: '';
			  position: absolute;
			  left: 0;
			  bottom: 0;
			  background: #cccccc;
			  width: 100%;
			  height: 1px;
			  -webkit-transform: scaleY(0.5);
			  transform: scaleY(0.5);
			  -webkit-transform-origin: 0 0;
			  transform-origin: 0 0;
			}
	—— 居中为什么要使用transform（为什么不使用marginLeft/Top）
		transform 属于合成属性，不会引起整个页面的回流重绘，节省性能消耗，但是占用内存会大些
		top/left属于布局属性，会引起页面layout回流和repaint重绘。

	—— 介绍css3中position:sticky
		使用条件：
			1、父元素不能overflow:hidden或者overflow:auto属性。
			2、必须指定top、bottom、left、right4个值之一，否则只会处于相对定位
			3、父元素的高度不能低于sticky元素的高度
			4、sticky元素仅在其父元素内生效

	—— 上下固定，中间滚动布局如何实现

	—— css实现border渐变
		linear-gradient

	—— 纯css实现一个高宽比为1：3的盒子 列举几种方式
		1、padding-bottom: 300%；（采用这种方法，需要把容器的height设置为0。而容器内容的所有元素都需要采用position:absolute，不然子元素内容都将被padding挤出容器（造成内容溢出）。）
		2、通过通配符*选择器，让其子元素的宽高和容器.aspectration一样大小：
			.aspectration > * {
			    position: absolute;
			    left: 0;
			    top: 0;
			    width: 100%;
			    height: 100%;
			}
		3、padding & calc() 
			.aspectration[data-ratio="16:9"] {
			    padding-top: calc(100% * 9 / 16);
			}
		4、视窗单位
			.aspectration[data-ratio="16:9"] {
			    width: 100vw;
			    height: 56.25vw;
			}

	—— css实现一个旋转的圆
		animation: rotate 0.75s linear infinite;

		@keyframes rotate {
		    0% {
		        transform: rotate(0deg);
		    }
		    50% {
		        transform: rotate(180deg);
		    }
		    100% {
		        transform: rotate(360deg);
		    }
		}

	—— BFC，IFC，FFC的区别
		1、BFC “块级格式化上下文”，就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。
			如何产生BFC：
				float的值不为none。
				overflow的值不为visible。
				position的值不为relative和static。
				display的值为table-cell, table-caption, inline-block中的任何一个。
		2、IFC “内联格式化上下文”，IFC的line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的padding/margin影响)
			作用：
				水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。
				垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。
		3、FFC：“自适应格式化上下文”，display值为flex或者inline-flex的元素将会生成自适应容器（flex container）。

	—— css3有哪些新特性
		新增选择器 p:nth-child（n）{color: rgba（255, 0, 0, 0.75）}
		弹性盒模型 display: flex;
		多列布局 column-count: 5;
		媒体查询 @media （max-width: 480px） {.box: {column-count: 1;}}
		个性化字体 @font-face{font-family:BorderWeb;src:url（BORDERW0.eot）；}
		颜色透明度 color: rgba（255, 0, 0, 0.75）；
		圆角 border-radius: 5px;
		渐变 background:linear-gradient（red, green, blue）；
		阴影 box-shadow:3px 3px 3px rgba（0, 64, 128, 0.3）；
		倒影 box-reflect: below 2px;
		文字装饰 text-stroke-color: red;
		文字溢出 text-overflow:ellipsis;
		背景效果 background-size: 100px 100px;
		边框效果 border-image:url（bt_blue.png） 0 10;
		转换：
			旋转 transform: rotate（20deg）；
			倾斜 transform: skew（150deg, -10deg）；
			位移 transform:translate（20px, 20px）；
			缩放 transform: scale（.5）；
			平滑过渡 transition: all .3s ease-in .1s;
			动画 @keyframes anim-1 {50% {border-radius: 50%;}} animation: anim-1 1s;


	—— CSS3新增伪类有那些？
		:first-of-type
		:last-of-type
		:only-of-type
		:only-child
		:nth-child(n)
		:nth-last-child(n)
		:nth-of-type(n)
		:nth-last-of-type(n)
		:last-child
		:root
		:empty
		:target
		:enabled
		:disabled
		:checked
		:not(selector)
		::selection


	—— 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？
		IE盒模型的width包含：content+border+padding
		W3C盒模型的width只包含：content

	—— display:inline-block 什么时候不会显示间隙？
		产生的原因：
			元素被当成行内元素排版的时候，元素之间的空白符（空格、回车换行等）都会被浏览器处理，根据white-space的处理方式（默认是normal，合并多余空白），原来HTML代码中的回车换行被转成一个空白符，在字体不为0的情况下，空白符占据一定宽度，所以inline-block的元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素font-size:16px时，间距为8px。
		解决的方案：
			将子元素放置在同一行（移除空格）
			为父元素中设置font-size: 0，在子元素上重置正确的font-size
			为inline-block元素添加样式float:left
			设置子元素margin值为负数
			设置父元素，display:table和word-spacing

	—— 行内元素float:left后是否变为块级元素？
		行内元素设置成浮动之后变得更加像是 inline-block
		行内块级元素，设置成这个属性的元素会同时拥有行内和块级的特性，最明显的不同是它的默认宽度不是 100%，块元素默认 100%宽度占据一行
		这时候给行内元素设置 padding-top 和 padding-bottom 或者 width、height 都是有效果的

	—— 在网页中的应该使用奇数还是偶数的字体？为什么呢？
		https://www.axihe.com/focus/css/82.html

	—— ::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用
		https://blog.csdn.net/weixin_47775490/article/details/106099784
		在 CSS 中伪类一直用 : 表示，如 :hover, :active 等
		伪元素在CSS1中已存在，当时语法是用 : 表示，如 :before 和 :after。后来在CSS3中修订，伪元素用 :: 表示，如 ::before 和 ::after以此区分伪元素和伪类。由于低版本IE对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 :after 这种老语法表示伪元素。
		单冒号(:)用于CSS3伪类
		双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）


	—— 如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）
		多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60*1000ms ＝ 16.7ms

	—— CSS3动画（简单动画的实现，如旋转等）
		1、依靠CSS3中提出的三个属性：transition、transform、animation

	—— base64的原理及优缺点
		优缺点：	
			优点可以加密，减少了 HTTTP 请求 ；
			缺点是需要消耗 CPU 进⾏编解码

	—— 流体布局、圣杯布局、双飞翼布局
		https://blog.csdn.net/wjf1997/article/details/108517404

	—— stylus/sass/less区别

	—— postcss的作用
		https://www.jianshu.com/p/7646a8377138

	—— 垂直塌陷及解决方法
		https://www.cnblogs.com/gaoht/p/9150176.html

JavaScript
	—— es6的新特性
		const let
		模板字符串
		箭头函数
		函数的参数默认值
		对象和数组解构
		for...of 和 for...in

	—— promise的使用，怎么用es5实现promise











































